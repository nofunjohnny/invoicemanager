{"ast":null,"code":"import _objectSpread from \"/Users/mac10/Desktop/invoicemanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/mac10/Desktop/invoicemanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/mac10/Desktop/invoicemanager/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { createStore as createReduxStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\nexport var createStore = function createStore() {\n  return createReduxStore(rootReducer, applyMiddleware(thunkMiddleware, apiCall, createLogger({\n    collapsed: true\n  })));\n};\n\nfunction apiCall(_ref) {\n  var dispatch = _ref.dispatch;\n  return function (next) {\n    return function (action) {\n      if (!action.apiCall) {\n        return next(action);\n      }\n\n      var apiCall = action.apiCall,\n          _action$types = action.types,\n          types = _action$types === void 0 ? [] : _action$types,\n          restAction = _objectWithoutProperties(action, [\"apiCall\", \"types\"]);\n\n      var _types = _slicedToArray(types, 3),\n          REQUEST = _types[0],\n          REQUEST_SUCCESS = _types[1],\n          REQUEST_FAIL = _types[2];\n\n      if (REQUEST) {\n        dispatch(_objectSpread({\n          type: REQUEST\n        }, restAction));\n      }\n\n      return apiCall().then(function (result) {\n        if (REQUEST_SUCCESS) {\n          dispatch(_objectSpread({\n            type: REQUEST_SUCCESS\n          }, restAction, {\n            result: result\n          }));\n        }\n      }).catch(function (error) {\n        console.log('An error occurred.', error);\n\n        if (REQUEST_FAIL) {\n          dispatch(_objectSpread({\n            type: REQUEST_FAIL\n          }, restAction, {\n            error: error.message,\n            errorCode: error.code\n          }));\n        }\n\n        throw error;\n      });\n    };\n  };\n}","map":{"version":3,"sources":["/Users/mac10/Desktop/invoicemanager/src/store/create-store.js"],"names":["createStore","createReduxStore","applyMiddleware","thunkMiddleware","createLogger","rootReducer","apiCall","collapsed","dispatch","next","action","types","restAction","REQUEST","REQUEST_SUCCESS","REQUEST_FAIL","type","then","result","catch","error","console","log","message","errorCode","code"],"mappings":";;;AAAA,SAASA,WAAW,IAAIC,gBAAxB,EAA0CC,eAA1C,QAAiE,OAAjE;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,OAAO,IAAML,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAMC,gBAAgB,CAC/CI,WAD+C,EAE/CH,eAAe,CACbC,eADa,EAEbG,OAFa,EAGbF,YAAY,CAAC;AAAEG,IAAAA,SAAS,EAAE;AAAb,GAAD,CAHC,CAFgC,CAAtB;AAAA,CAApB;;AASP,SAASD,OAAT,OAA+B;AAAA,MAAZE,QAAY,QAAZA,QAAY;AAC7B,SAAO,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACvB,UAAI,CAACA,MAAM,CAACJ,OAAZ,EAAqB;AACnB,eAAOG,IAAI,CAACC,MAAD,CAAX;AACD;;AAHsB,UAKfJ,OALe,GAKwBI,MALxB,CAKfJ,OALe;AAAA,0BAKwBI,MALxB,CAKNC,KALM;AAAA,UAKNA,KALM,8BAKE,EALF;AAAA,UAKSC,UALT,4BAKwBF,MALxB;;AAAA,kCAM0BC,KAN1B;AAAA,UAMhBE,OANgB;AAAA,UAMPC,eANO;AAAA,UAMUC,YANV;;AAQvB,UAAIF,OAAJ,EAAa;AACXL,QAAAA,QAAQ;AAAGQ,UAAAA,IAAI,EAAEH;AAAT,WAAqBD,UAArB,EAAR;AACD;;AAED,aAAON,OAAO,GACXW,IADI,CACC,UAAAC,MAAM,EAAI;AAEd,YAAIJ,eAAJ,EAAqB;AACnBN,UAAAA,QAAQ;AAAGQ,YAAAA,IAAI,EAAEF;AAAT,aAA6BF,UAA7B;AAAyCM,YAAAA,MAAM,EAANA;AAAzC,aAAR;AACD;AACF,OANI,EAOJC,KAPI,CAOE,UAAAC,KAAK,EAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAlC;;AAEA,YAAIL,YAAJ,EAAkB;AAChBP,UAAAA,QAAQ;AAAGQ,YAAAA,IAAI,EAAED;AAAT,aAA0BH,UAA1B;AAAsCQ,YAAAA,KAAK,EAAEA,KAAK,CAACG,OAAnD;AAA4DC,YAAAA,SAAS,EAAEJ,KAAK,CAACK;AAA7E,aAAR;AACD;;AAED,cAAML,KAAN;AACD,OAfI,CAAP;AAgBD,KA5BU;AAAA,GAAX;AA6BD","sourcesContent":["import { createStore as createReduxStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\n\nimport rootReducer from './reducers';\n\nexport const createStore = () => createReduxStore(\n  rootReducer,\n  applyMiddleware(\n    thunkMiddleware,\n    apiCall,\n    createLogger({ collapsed: true })\n  )\n);\n\nfunction apiCall({ dispatch }) {\n  return next => action => {\n    if (!action.apiCall) {\n      return next(action)\n    }\n\n    const { apiCall, types = [], ...restAction } = action;\n    const [REQUEST, REQUEST_SUCCESS, REQUEST_FAIL] = types;\n\n    if (REQUEST) {\n      dispatch({ type: REQUEST, ...restAction })\n    }\n\n    return apiCall()\n      .then(result => {\n\n        if (REQUEST_SUCCESS) {\n          dispatch({ type: REQUEST_SUCCESS, ...restAction, result })\n        }\n      })\n      .catch(error => {\n        console.log('An error occurred.', error);\n\n        if (REQUEST_FAIL) {\n          dispatch({ type: REQUEST_FAIL, ...restAction, error: error.message, errorCode: error.code })\n        }\n\n        throw error\n      });\n  }\n}"]},"metadata":{},"sourceType":"module"}